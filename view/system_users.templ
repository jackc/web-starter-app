package view

import (
	"github.com/gofrs/uuid/v5"
	"github.com/jackc/errortree"
	"strconv"
)

type SystemUsersPageUser struct {
	ID       uuid.UUID
	Username string
	System   bool
}

templ SystemUsersPage(users []SystemUsersPageUser) {
	<a href="/system/users/new" class="link">New User</a>
	for _, user := range users {
		<div>
			<span>{ user.Username }</span>
			<span>
				if user.System {
					System
				} else {
					User
				}
			</span>
			<a href={ templ.SafeURL("/system/users/" + user.ID.String()) } class="link">Show</a>
		</div>
	}
}

templ SystemUsersShowPage(user *SystemUsersPageUser) {
	<dl>
		<dt>Username</dt>
		<dd>{ user.Username }</dd>
		<dt>System</dt>
		<dd>{ strconv.FormatBool(user.System) }</dd>
	</dl>
	<a href={ templ.SafeURL("/system/users/" + user.ID.String() + "/edit") } class="link">Edit</a>
	<form action={ templ.SafeURL("/system/users/" + user.ID.String() + "/delete") } method="post">
		<input type="hidden" name="gorilla.csrf.Token" value={ csrfToken(ctx) }/>
		<button type="submit" class="link">Delete</button>
	</form>
}

type SystemUsersFormFields struct {
	Username string
	System   bool
}

templ systemUsersFormFields(formData *SystemUsersFormFields, validationErrors *errortree.Node) {
	<div class="mt-4">
		<label
			for="username"
			class="block"
		>
			Username
		</label>
		<input
			id="username"
			class="border"
			type="text"
			name="username"
			value={ formData.Username }
			required
		/>
		if validationErrors != nil {
			<ul>
				for _, err := range validationErrors.Get("username") {
					<li class="text-red-500">{ err.Error() }</li>
				}
			</ul>
		}
	</div>
	<div class="mt-4">
		<input type="hidden" name="system" value="0"/>
		<input
			id="system"
			class="border"
			type="checkbox"
			name="system"
			checked?={ formData.System }
			value="1"
		/>
		<label
			for="system"
			class="block"
		>
			System
		</label>
	</div>
}

templ SystemUsersNewPage(formData *SystemUsersFormFields, validationErrors *errortree.Node) {
	<form method="post" action="/system/users">
		<input type="hidden" name="gorilla.csrf.Token" value={ csrfToken(ctx) }/>
		@systemUsersFormFields(formData, validationErrors)
		@button("Save", templ.Attributes{"type": "submit"})
	</form>
}

templ SystemUsersEditPage(id uuid.UUID, formData *SystemUsersFormFields, validationErrors *errortree.Node) {
	<form method="post" action={ templ.SafeURL("/system/users/" + id.String() + "/update") }>
		<input type="hidden" name="gorilla.csrf.Token" value={ csrfToken(ctx) }/>
		@systemUsersFormFields(formData, validationErrors)
		@button("Save", templ.Attributes{"type": "submit"})
	</form>
}
